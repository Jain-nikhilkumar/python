import re

def static_analysis(code):
    # Rule-based detection for potentially malicious code patterns
    malicious_patterns = [
        r'\bos\.system\b',             # Detects the use of os.system
        r'\bexec\b',                   # Detects the use of exec function
        r'\bimport\s+subprocess\b',    # Detects the import of subprocess module
        r'\bopen\(',                   # Detects the use of open function
        r'\bsocket\.socket\b',         # Detects the creation of a socket
    ]

    for pattern in malicious_patterns:
        if re.search(pattern, code):
            return True

    return False

def simulate_dynamic_analysis(code):
    # Simulated dynamic analysis to detect potentially malicious behavior
    # This is a placeholder and needs to be tailored based on specific threats
    malicious_actions = [
        'os.system',               # Simulate a potentially malicious system command
        'subprocess.run',          # Simulate the use of subprocess to run commands
        'socket.create_connection', # Simulate the creation of a network socket
    ]

    for action in malicious_actions:
        if action in code:
            return True

    return False

def malware_detection_pipeline(code):
    if static_analysis(code):
        return "Static analysis detected potentially malicious code!"
    
    if simulate_dynamic_analysis(code):
        return "Dynamic analysis detected potentially malicious behavior!"

    return "No malicious code found."

if __name__ == "__main__":
    from malicious_code_samples import benign_code_sample, malicious_code_sample_1, malicious_code_sample_2, malicious_code_sample_3

    code_samples = [
        ("Benign Code Sample", benign_code_sample),
        ("Malicious Code Sample 1", malicious_code_sample_1),
        ("Malicious Code Sample 2", malicious_code_sample_2),
        ("Malicious Code Sample 3", malicious_code_sample_3),
        # Add more code samples as needed
    ]

    for sample_name, code_sample in code_samples:
        result = malware_detection_pipeline(code_sample)
        print(f"Result for {sample_name}:\n{result}\n{'='*40}\n")
